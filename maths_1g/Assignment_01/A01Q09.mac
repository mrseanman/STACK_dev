make_arrow(
    start_,
    end_,
    [arrow_options_]):= 
    block(
        [default_arrow_length_, default_arrow_angle_,
            arrow_length_, arrow_angle_,
            n_, p0_, p1_, p2_],
        default_arrow_length_: 0.5,
        default_arrow_angle_: %pi/8,
        arrow_options_: flatten(arrow_options_),
        if emptyp(arrow_options_) then block(
            arrow_length_: default_arrow_length_,
            arrow_angle_: default_arrow_angle_
        ) elseif length(arrow_options_)=1 then block(
            arrow_length_: arrow_options_[1],
            arrow_angle_: default_arrow_angle_
        ) elseif length(arrow_options_)=1 then block(
            arrow_length_: arrow_options_[1],
            arrow_angle_: arrow_options_[2]
        ),
    
        n_: (end_ - start_)/ vec_norm(end_ - start_),
        p0_: end_ - arrow_length_ * n_,
        p1_: rotate_about_point(p0_, end_, arrow_angle_),
        p2_: rotate_about_point(p0_, end_, -arrow_angle_),
        return([discrete, [start_, end_, p1_, p2_, end_]])

    );

/* rotate the point "input" about an arbitrary centre */
rotate_about_point( 
    input,
    rotation_centre,
    theta):=
    block(
        [M_, V_, c_, s_, x_, y_],
        c_: cos(theta),
        s_: sin(theta),
        x_: rotation_centre[1],
        y_: rotation_centre[2],

        M_: matrix(
            [c_, -s_, x_ - c_ * x_ + s_ * y_],
            [s_, c_, y_ - s_ * x_ - c_ * y_],
            [0, 0, 1]
        ),

        V_: M_ . [input[1], input[2], 1],
        return([V_[1][1], V_[2][1]])
    );


vec_norm(x_):= sqrt(x_.x_);

arrow_label_pos(
    start_,
    end_,
    [above_below_]):=
    block(
        [n_, n_perp_, mid_],
        above_below_: first(flatten(above_below_)),
        if emptyp(above_below) then above_below_: 1,
        n_: (end_ - start_)/ vec_norm(end_ - start_),
        n_perp_: [-n_[2], n_[1]],
        mid_ish_: (start_*0.6 + end_*0.4),
        return( mid_ish_ + n_perp_ * above_below_ * 0.8)
    );

make_vec_plot(vecs_, labels_, [labels_above_below_]):= block(
    labels_above_below_: flatten(labels_above_below_),
    if emptyp(labels_above_below_) then labels_above_below_: makelist(1, i, 1, length(vecs_)),
    discrete_plots_: makelist(make_arrow(vecs_[i][1], vecs_[i][2]), i, 1, length(vecs_)),
    label_positions_: makelist(arrow_label_pos(vecs_[i][1], vecs_[i][2], labels_above_below_[i]), i, 1, length(vecs_)),
    labels_formatted_: makelist([labels_[i], label_positions_[i][1], label_positions_[i][2]], i, 1, length(vecs_)),
    plot(discrete_plots_,
        append([label], labels_formatted_),
        [x, -10, 10], [y, -10, 10],
        [box, false], [axes, false],
        /* unfortunately [margin, 0] is not supported on our stack server */
        [plottags, false],
        [size,250,250],
        [yx_ratio, 1])
);


/* ------------------------------------------------------ */
/* Question begins */
A_vec: [0,5];
B_vec: [-1,-1];
C_vec: [4,-2];



A_plot: make_vec_plot([[[0,0], A_vec]], ["A"]);
B_plot: make_vec_plot([[[0,0], B_vec]], ["B"]);
C_plot: make_vec_plot([[[0,0], C_vec]], ["C"]);


vec_expressions: [
    A_vec + B_vec + C_vec,
    A_vec - C_vec,
    -A_vec + C_vec,
    -A_vec + 3 * B_vec
    ];

vec_plots: makelist(make_vec_plot([[[0,0], vec_expressions[i]]], [""]), i , 1, 4);

MCQ1: random_permutation(makelist([i, is(i=1), vec_plots[i]], i, 1, 4));
MCQ2: random_permutation(makelist([i, is(i=2), vec_plots[i]], i, 1, 4));
MCQ3: random_permutation(makelist([i, is(i=3), vec_plots[i]], i, 1, 4));
MCQ4: random_permutation(makelist([i, is(i=4), vec_plots[i]], i, 1, 4));


/* Feedback */
fb_p_1: make_vec_plot(  [   [[0,0], A_vec],
                            [A_vec, A_vec + B_vec],
                            [A_vec + B_vec, A_vec + B_vec + C_vec],
                            [[0,0], A_vec + B_vec + C_vec]
                        ],
                        ["A", "B", "C", "A+B+C"],
                        [1, -2, 1, -2]);

fb_p_2: make_vec_plot(  [   [[0,0], A_vec],
                            [A_vec, A_vec - C_vec],
                            [[0,0], A_vec - C_vec]
                        ],
                        ["A", "-C", "A-C"],
                        [-1, -1, 2.4]);          

fb_p_3: make_vec_plot(  [   [[0,0], -A_vec],
                            [-A_vec, -A_vec + C_vec],
                            [[0,0], -A_vec + C_vec]
                        ],
                        ["-A", "C", "-A+C"],
                        [-2, -1.5, 1]);

fb_p_4: make_vec_plot(  [   [[0,0], -A_vec],
                            [-A_vec, -A_vec + 3*B_vec],
                            [[0,0], -A_vec + 3*B_vec]
                        ],
                        ["-A", "3B", "-A+3B"],
                        [1, 1, -5]);   
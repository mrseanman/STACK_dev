/* In maxima, `echelon` normalises the leading term, this is not    */
/* the deinition of non-reduced echelon in wikipedia.               */
/* `triangularize` does not normalise the leading term but is not   */
/* idempotent. I.e. this is not true in general:                    */
/*      triangularize(m) = triangularize(triangularize(m))          */
/* This is an issue for checking if a students answer is            */
/* triangularized. We would need to write a function.               */

/* I am just going to worry about reduced row echelon form          */

/* Takes in a row operation and returns an elementary transformation    */
/* matrix for that row operation. i.e. it applies that row operation to */
/* the identity matrix and returns the result.                          */
/* To apply this to a matrix (do the row operations to it), just matrix */
/* multiply the result from this function on the left. E.g.             */
/* row_lin(R[2], R[2] + R[3]) . M                                       */
/* For a linear transformation of rows, pass row_lin(R[i], eqn) where:  */
/*  - i is the row getting transformed                                  */
/*  - eqn is an equation in rows for what row_i should become where     */
/*          R[k] represents the kth row                                 */
/* e.g. row_lin(R[2], R[2] + 4*R[3]) represents R[2] -> R[2] + 4*R[3]   */
/* For a row swap (also technically linear), pass row_swap(R[i]. R[j])  */
/* this will swap rows i and j                                          */
row_op_to_emat(row_op_):= block(
    [matrix_size_, I_, op_type_, swap_list_, row_to_operate_, transformation_,
        original_row_, symbol_to_row_relations_, new_row_],
    matrix_size_: 2,
    I_: ident(matrix_size_),
    op_type_: type_of_operation(row_op_),
    if op_type_ = "swap" then block(
        swap_list_: get_row_list_from_swap_op(row_op_),
        return(
            apply(
                matrix,
                makelist(I_[swap_func(swap_list_, i_)], i_, matrix_size_)))
    ) elseif op_type_ = "linear" then block(        
        row_to_operate_: get_operate_row_from_row_op(row_op_),
        transformation_: get_transformation_from_lin_row_op(row_op_),
        original_row_: I_[row_to_operate_],
        symbol_to_row_relations_: makelist(R[i_]=I_[i_], i_, matrix_size_),
        /* listify just for safety */
        new_row_: listify(psubst(symbol_to_row_relations_, transformation_)),
        return(
            apply(
                matrix,
                makelist(if i_=row_to_operate_ then new_row_ else I_[i_], i_, matrix_size_)))
    ) else return("error")
);  

get_operate_row_from_row_op(row_op_):= first(args(first(args(row_op_))));
get_transformation_from_lin_row_op(row_op_):= second(args(row_op_));
get_row_list_from_swap_op(row_op_):= map(lambda([x_], first(args(x_))), args(row_op_));


type_of_operation(row_op_):= 
    if op(row_op_) = row_swap then
        "swap"
    elseif op(row_op_) = row_lin then
        "linear"
    else
        "error";

swap_func(swap_list_, x_):= 
    if x_ = swap_list_[1] then
        swap_list_[2]
    elseif x_ = swap_list_[2] then
        swap_list_[1]
    else
        x_;

tex_row_lin(row_op_) := block(
    [action_row_, row_transformation_],
    [action_row_, row_transformation_]: args(row_op_),
    sconcat(tex1(action_row_), "\\, \\rightarrow\\, ", tex1(row_transformation_))
);

tex_row_swap(row_op_) := block(
    [rows_],
    rows_: get_row_list_from_swap_op(row_op_),
    sconcat("R_", tex1(rows_[1]), "\\, \\leftrightarrow \\,", "R_", tex1(rows_[2]))
);

texput(row_lin, tex_row_lin);
texput(row_swap, tex_row_swap);

/* Takes in a sequence of row operations and an initial matrix and              */
/* spits out a sequence of matrices resulting from sequential application       */
/* of the row operations                                                        */
/* At each step M_ is substituted for cur_mat_ (M_ is shorthand for cur_mat_)   */
/* The row operations with the relevant substitutions will also be returned     */
make_matrix_seq(row_ops_, initial_matrix_):= block(
    [cur_mat_, cur_seq_mats_, row_op_, row_op_updated_, cur_seq_row_ops_],
    cur_mat_: initial_matrix_,
    cur_seq_mats_: [initial_matrix_],
    cur_seq_row_ops_: [],
    for row_op_ in row_ops_ do block(
        row_op_updated_: ev(row_op_, M_ = cur_mat_),
        cur_seq_row_ops_: append(cur_seq_row_ops_, [row_op_updated_]),
        cur_mat_: row_op_to_emat(row_op_updated_) . cur_mat_,
        cur_seq_mats_: append(cur_seq_mats_, [cur_mat_])
    ),
    [cur_seq_row_ops_, cur_seq_mats_]
);


/* ----- Question ------------------------------------------------------------- */

r():= rand_with_prohib(-10, 10, [-1, 0, 1]);
v: [r(), r()];

/* 1: full rank */
/* 2: rank 1    */
type: rand([1,2]);
if type = 1 then block(
    m: matrix(v, v+1)
) else block(
    coeff: r(),
    m: matrix(coeff * v, v)
);

tans1: rref(m);

/* ----- For feedback ----------------------------------------------------------- */

if type = 1 then block(
    row_op_1: row_lin(R[1], 1/M_[1][1] * R[1]),
    row_op_2: row_lin(R[2], R[2] - M_[2][1] * R[1]),
    row_op_3: row_lin(R[2], 1/M_[2][2] * R[2]),
    row_op_4: row_lin(R[1], R[1] - M_[1][2] * R[2]),

    [sub_row_ops, mat_seq]: make_matrix_seq(
        [
            row_op_1,
            row_op_2,
            row_op_3,
            row_op_4
        ],
        m)
) else block(
    row_op_1: row_lin(R[1], 1/M_[1][1] * R[1]),
    row_op_2: row_lin(R[2], R[2] - M_[2][1] * R[1]),
    
    [sub_row_ops, mat_seq]: make_matrix_seq(
        [
            row_op_1,
            row_op_2
        ],
        m)
);
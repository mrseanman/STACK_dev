texput(AB, "{\\overrightarrow{\\rm AB}}");
texput(OA, "{\\overrightarrow{\\rm OA}}");
/* having all vector elements different is important for mcq part */
r3():= rand_selection(delete(0,makelist(i,i,-9,9)), 3);
a: r3();
b: r3();
o: [0,0,0];
/* no components of b-a can be zero */
while apply(min,abs(b-a)) = 0 do
  b: r3();
/*type 1: one point is the origin; type 2: use a and b*/
type: rand([1,2]);
if type = 1 then block(
  line_seg: OA,
  dir_vec: a,
  dir: t*dir_vec,
  param: dir,
  tans1: ntupleify(dir),
  sym: [x/a[1], y/a[2], z/a[3]],
  wrong: [ 
  [x*a[1], y*a[2], z*a[3]],
  [x/b[1], y/b[2], z/b[3]],
  [x-a[1], y-a[2], z-a[3]],
  [x/a[2], y/a[3], z/a[1]] ],
  step_1: ntupleify(a) - ntupleify(o)
) else block(
  line_seg: AB,
  dir_vec: b - a,
  dir: t*dir_vec,
  param: a + dir,
  tans1: ntupleify(param),
  sym: [(x-a[1])/dir_vec[1], (y-a[2])/dir_vec[2], (z-a[3])/dir_vec[3]],
  wrong: [
  [x*a[1],              y*a[2],              z*a[3]],
  [x/b[1],              y/b[2],              z/b[3]],
  [x-a[1],              y-a[2],              z-a[3]],
  [(x-dir_vec[1])/b[1], (y-dir_vec[2])/b[2], (z-dir_vec[3])/b[3]] ],
  step_1: ntupleify(b) - ntupleify(a)
);
tans2: random_permutation(
  [ [1, true, castext("{@sym[1]@} = {@sym[2]@} = {@sym[3]@}")],
    [2, false, castext("{@wrong[1][1]@} = {@wrong[1][2]@} = {@wrong[1][3]@}")],
    [3, false, castext("{@wrong[2][1]@} = {@wrong[2][2]@} = {@wrong[2][3]@}")],
    [4, false, castext("{@wrong[3][1]@} = {@wrong[3][2]@} = {@wrong[3][3]@}")],
    [5, false, castext("{@wrong[4][1]@} = {@wrong[4][2]@} = {@wrong[4][3]@}")] ]
);

/* prt */

linearly_independent(vects):= is(rank(apply(matrix,vects))=length(vects));

points_colinear(points):= block(
    vects: makelist(points[i+1] - points[i], i, length(points) - 1),
    is(rank(apply(matrix, vects)) < 2)
    );

test_line_param_eqn(teacher_ans, student_ans, param):= points_colinear(
  [
    ev(teacher_ans, ev(param, simp) = 0),
    ev(teacher_ans, ev(param, simp) = 1),
    ev(student_ans, ev(param, simp) = 0),
    ev(student_ans, ev(param, simp) = 1)
  ]);

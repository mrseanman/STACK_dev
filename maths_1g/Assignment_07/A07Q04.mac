poss_vals: delete(0,makelist(i,i,-9,9));
r3():= rand_selection(poss_vals, 3);
r():= rand_with_prohib(-9,9,[0]);
linearly_independent(vects):= is(rank(apply(matrix,vects))=length(vects));

/*type 1: parallel lines (non-intersecting); type 2: intersecting (not parallel); type 3: skew*/
type: rand([1,2,3]);
point_1: r3();
dir: makelist(r(), 3);
line_1: point_1 + t*dir;
scale: rand_with_prohib(-9,9,[0,1]);
if type = 1 then block(
  dir_2: scale*dir,
  point_2: r3(),
  while point_2 = point_1 do
    point_2: r3(),
  line_2: point_2 + s*dir_2,
  tans1: [
   [1, true, "parallel"], 
   [2, false, "intersecting"], 
   [3, false, "skew"]
  ],
  tans2: DNE,
  /* check */
  if not(emptyp(solve(map("=", line_1, line_2), [s,t]))) then 1/0
) elseif type = 2 then block(
  no_mult: r3(),
  /* Need to test for linear independence, not just equality */
  while not(linearly_independent([no_mult, dir])) or member(0, scale*dir+no_mult) do
    no_mult: r3(),
  dir_2: scale*dir + no_mult,
  t_val: rand_range(-4,4,1),
  s_val: rand_range(-4,4,1),
  point_2: ev(line_1, t = t_val) - s_val*dir_2,
  line_2: point_2 + s*dir_2,
  tans1: [
    [1, false, "parallel"], 
    [2, true, "intersecting"], 
    [3, false, "skew"]
  ],
  tans2: ntupleify(ev(line_1, t = t_val)),
  /* check */
  if not(length(solve(map("=", line_1, line_2), [s,t])) = 1) then 1/0
) else block(
  no_mult: r3(),
  while not(linearly_independent([no_mult, dir])) or member(0, scale*dir+no_mult) do
    no_mult: r3(),
  dir_2: scale*dir + no_mult,
  t_val: rand_range(-4,4,1),
  s_val: rand_range(-4,4,1),
  point_2: ev(line_1, t = t_val) - s_val*dir_2 + r3(),
  line_2: point_2 + s*dir_2,
  tans1: [
    [1, false, "parallel"], 
    [2, false, "intersecting"], 
    [3, true, "skew"]
  ],
  tans2: DNE,
  /* check */
  if not(emptyp(solve(map("=", line_1, line_2), [s,t]))) then 1/0
);
params_1: [x = line_1[1], y = line_1[2], z = line_1[3]];
params_2: [x = line_2[1], y = line_2[2], z = line_2[3]];

/*feedback*/
dirv_1: ntupleify(dir);
dirv_2: ntupleify(dir_2);
pt_1: ntupleify(point_1);
pt_2: ntupleify(point_2);
if type > 1 then block(
  step_1: ev((line_2[1] - point_1[1])/dir[1], expand, simp),
  step_2: ev(line_1[2], t = step_1, expand, simp),
  step_3: first(solve(step_2 = line_2[2], s)),
  step_4: ev(step_1, step_3, expand, simp),
  step_5L: subst(step_4, t, line_1[3]),
  step_5R: subst(rhs(step_3), s, line_2[3])
);

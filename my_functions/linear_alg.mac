/*  Find if a list of m-vectors are linearly independent */
linearly_independent(vects):= is(rank(apply(matrix,vects))=length(vects));

make_lin_indep_array(generator, n):= block(
    vecs: makelist(generator(), n),
    while not(linearly_independent(vecs)) do 
        vecs: makelist(generator(), n),
    vecs
    );

/*  Matrix multiplication that always returns a matrix and only works on matrices */
/*  Normal Maxima behaviour is to evaluate [1].[2] = 2 ... not [1].[2]=[2] as we would expect.*/
safe_matrix_mult(A,B):=
    block(
        [ncolsA,nrowsB],
        ncolsA: length(transpose(A)),
        nrowsB: length(B),
        if (not(matrixp(A)) or not(matrixp(B))) then
            return(false)
        elseif (not(is(ncolsA=nrowsB))) then
            return(false)
        else
            block(
                [mult],
                mult:A.B,
                if (matrixp(mult)) then
                    return(mult)
                else    
                    return(matrix([mult]))
            )
    );

vec_norm(vec):= sqrt(vec.vec);

generate_perp_vec(vec):= block(
    /* Rejects a vector with any value above max val */
    max_val: 30,
    rand_vec: makelist(rand_with_prohib(-5, 5, [0]), length(vec)),
    while not(linearly_independent([vec, rand_vec])) do
        rand_vec: makelist(rand_with_prohib(-10, 10, [0]), length(vec)),
    perp: vec_norm(vec)^2 * rand_vec - vec.rand_vec * vec,
    perp: perp/first(apply(ezgcd, perp)),
    if apply(max, perp) > max_val then generate_perp_vec(vec) else perp
    );

/* see https://math.stackexchange.com/questions/405966/if-i-have-three-points-is-there-an-easy-way-to-tell-if-they-are-collinear */
three_points_colinear(A,B,C):= is((B[2] - A[2]) * (C[1] - B[1]) = (C[2] - B[2]) * (B[1] - A[1]));

/* Any dimension, any number of vects version of above */
points_colinear(points):= block(
    vects: makelist(points[i+1] - points[i], i, length(points) - 1),
    /* < 2 because i want a single point to be colinear with itself, i.e [[1,2,3]] is colinear */
    is(rank(apply(matrix, vects)) < 2)
    );

/* Tests to see if two parametric descriptions of a line are equivalent (give the same line) */
test_line_param_eqn(teacher_ans, student_ans, param):= points_colinear(
  [
    ev(teacher_ans, ev(param, simp) = 0),
    ev(teacher_ans, ev(param, simp) = 1),
    ev(student_ans, ev(param, simp) = 0),
    ev(student_ans, ev(param, simp) = 1)
  ]);

cross_product(a,b) := [
    a[2]*b[3] - a[3]*b[2],
    a[3]*b[1] - a[1]*b[3],
    a[1]*b[2] - a[2]*b[1]
    ];

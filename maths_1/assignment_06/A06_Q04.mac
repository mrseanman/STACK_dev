crossProduct(a,b) := [a[2]*b[3]-a[3]*b[2],a[3]*b[1]-a[1]*b[3],a[1]*b[2]-a[2]*b[1]];
vectorify(list):=sconcat("⟨",list[1],",",list[2],",",list[3],"⟩");

type:rand([1,2]) /*point and plane, three points*/

point:makelist(rand_with_prohib(-5,5,[0]),3);
vectors:makelist(makelist(rand_with_prohib(-5,5,[0]),3),2);
if is(vectors[1][1]/vectors[2][1]=vectors[1][2]/vectors[2][2]) and
is(vectors[1][1]/vectors[2][1]=vectors[1][3]/vectors[2][3]) then
vectors[2][3]:vectors[2][3]+1;

otherpoints:makelist(point+vectors[i],i,2);
nvector:crossProduct(vectors[1],vectors[2]);

simp:false;
planeLHS:nvector[1]*x+nvector[2]*y+nvector[3]*z
planeEQ:planeLHS=simplify(at(planeLHS,[x=point[1],y=point[2],z=point[3]])+rand_with_prohib(-50,50,[0]));
tans1:planeLHS=at(planeLHS,[x=point[1],y=point[2],z=point[3]]);
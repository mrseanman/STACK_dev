const: rand_range(2,10,1);

coeff: rand([2,3,4]);
u1fn: x^3;
du1fn: diff(u1fn, x);
dv1fn: coeff*cos(coeff*x);
v1fn: integrate(dv1fn, x);


u2fn: du1fn;
du2fn: diff(u2fn, x);
dv2fn: v1fn;
v2fn: integrate(dv2fn, x);

u3fn: du2fn;
du3fn: diff(u3fn, x);
dv3fn: v2fn;
v3fn: integrate(dv3fn, x);

arg: u1fn*dv1fn;
limit: rand([%pi/4, %pi/3, %pi/2]);
qdispint: 'integrate(arg, x, -limit, limit);
tans1: ev(qdispint, nouns);

/* for feedback */
dispint1: 'integrate(arg, x);
dispint2: 'integrate(u2fn*dv2fn, x); 
dispint3: 'integrate(u3fn*dv3fn, x);
dispint4: 'integrate(du3fn*v3fn, x);

evint2: ev(dispint2, nouns);
evint3: ev(dispint3, nouns);
evint4: ev(dispint4, nouns);

fullint3: collectterms(factor(u3fn*v3fn - evint4), sin(x), cos(x));
fullint2: collectterms(factor(u2fn*v2fn - fullint3), sin(x), cos(x));
fullint1: collectterms(factor(u1fn*v1fn - fullint2), sin(x), cos(x));
